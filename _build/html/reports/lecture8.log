Traceback (most recent call last):
  File "/Users/danhammer/streamlitenv/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/Users/danhammer/streamlitenv/lib/python3.7/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/danhammer/streamlitenv/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/danhammer/streamlitenv/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/asyncio/base_events.py", line 583, in run_until_complete
    return future.result()
  File "/Users/danhammer/streamlitenv/lib/python3.7/site-packages/nbclient/client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/Users/danhammer/streamlitenv/lib/python3.7/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/danhammer/streamlitenv/lib/python3.7/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
df["country"] = df["country"].str.strip()
graphing_df = gdf.groupby(["country", "status"])["geometry"].count().reset_index()

graphing_df["status"] = graphing_df["status"] == "Active"
xx = graphing_df.groupby(["country", "status"])["geometry"].sum().reset_index()

active = xx[xx["status"] == True]
inactive = xx[xx["status"] != True]

plt.bar(active["country"], active["geometry"])
plt.bar(inactive["country"], inactive["geometry"], bottom=active["geometry"])
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-9-d82dc49db107>[0m in [0;36m<module>[0;34m[0m
[1;32m      9[0m [0;34m[0m[0m
[1;32m     10[0m [0mplt[0m[0;34m.[0m[0mbar[0m[0;34m([0m[0mactive[0m[0;34m[[0m[0;34m"country"[0m[0;34m][0m[0;34m,[0m [0mactive[0m[0;34m[[0m[0;34m"geometry"[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 11[0;31m [0mplt[0m[0;34m.[0m[0mbar[0m[0;34m([0m[0minactive[0m[0;34m[[0m[0;34m"country"[0m[0;34m][0m[0;34m,[0m [0minactive[0m[0;34m[[0m[0;34m"geometry"[0m[0;34m][0m[0;34m,[0m [0mbottom[0m[0;34m=[0m[0mactive[0m[0;34m[[0m[0;34m"geometry"[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     12[0m [0mplt[0m[0;34m.[0m[0mshow[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/streamlitenv/lib/python3.7/site-packages/matplotlib/pyplot.py[0m in [0;36mbar[0;34m(x, height, width, bottom, align, data, **kwargs)[0m
[1;32m   2487[0m     return gca().bar(
[1;32m   2488[0m         [0mx[0m[0;34m,[0m [0mheight[0m[0;34m,[0m [0mwidth[0m[0;34m=[0m[0mwidth[0m[0;34m,[0m [0mbottom[0m[0;34m=[0m[0mbottom[0m[0;34m,[0m [0malign[0m[0;34m=[0m[0malign[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2489[0;31m         **({"data": data} if data is not None else {}), **kwargs)
[0m[1;32m   2490[0m [0;34m[0m[0m
[1;32m   2491[0m [0;34m[0m[0m

[0;32m~/streamlitenv/lib/python3.7/site-packages/matplotlib/__init__.py[0m in [0;36minner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1445[0m     [0;32mdef[0m [0minner[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1446[0m         [0;32mif[0m [0mdata[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1447[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0mmap[0m[0;34m([0m[0msanitize_sequence[0m[0;34m,[0m [0margs[0m[0;34m)[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1448[0m [0;34m[0m[0m
[1;32m   1449[0m         [0mbound[0m [0;34m=[0m [0mnew_sig[0m[0;34m.[0m[0mbind[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/streamlitenv/lib/python3.7/site-packages/matplotlib/axes/_axes.py[0m in [0;36mbar[0;34m(self, x, height, width, bottom, align, **kwargs)[0m
[1;32m   2430[0m         x, height, width, y, linewidth = np.broadcast_arrays(
[1;32m   2431[0m             [0;31m# Make args iterable too.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2432[0;31m             np.atleast_1d(x), height, width, y, linewidth)
[0m[1;32m   2433[0m [0;34m[0m[0m
[1;32m   2434[0m         [0;31m# Now that units have been converted, set the tick locations.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m<__array_function__ internals>[0m in [0;36mbroadcast_arrays[0;34m(*args, **kwargs)[0m

[0;32m~/streamlitenv/lib/python3.7/site-packages/numpy/lib/stride_tricks.py[0m in [0;36mbroadcast_arrays[0;34m(subok, *args)[0m
[1;32m    256[0m     [0margs[0m [0;34m=[0m [0;34m[[0m[0mnp[0m[0;34m.[0m[0marray[0m[0;34m([0m[0m_m[0m[0;34m,[0m [0mcopy[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m [0msubok[0m[0;34m=[0m[0msubok[0m[0;34m)[0m [0;32mfor[0m [0m_m[0m [0;32min[0m [0margs[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m    257[0m [0;34m[0m[0m
[0;32m--> 258[0;31m     [0mshape[0m [0;34m=[0m [0m_broadcast_shape[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    259[0m [0;34m[0m[0m
[1;32m    260[0m     [0;32mif[0m [0mall[0m[0;34m([0m[0marray[0m[0;34m.[0m[0mshape[0m [0;34m==[0m [0mshape[0m [0;32mfor[0m [0marray[0m [0;32min[0m [0margs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/streamlitenv/lib/python3.7/site-packages/numpy/lib/stride_tricks.py[0m in [0;36m_broadcast_shape[0;34m(*args)[0m
[1;32m    187[0m     [0;31m# use the old-iterator because np.nditer does not handle size 0 arrays[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    188[0m     [0;31m# consistently[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 189[0;31m     [0mb[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mbroadcast[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m[[0m[0;34m:[0m[0;36m32[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    190[0m     [0;31m# unfortunately, it cannot handle 32 or more arguments directly[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    191[0m     [0;32mfor[0m [0mpos[0m [0;32min[0m [0mrange[0m[0;34m([0m[0;36m32[0m[0;34m,[0m [0mlen[0m[0;34m([0m[0margs[0m[0;34m)[0m[0;34m,[0m [0;36m31[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: shape mismatch: objects cannot be broadcast to a single shape
ValueError: shape mismatch: objects cannot be broadcast to a single shape

